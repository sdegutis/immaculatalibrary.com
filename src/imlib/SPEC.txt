

Engine input data:

  { [key: string]: object }[]

  Used for routes, views, data, helpers, etc.


Engine rules (i.e. app.start):

  1. Link items via $type
  2. Set item children
  3. Apply figures
  4. Cast shadows
  5. Build site structures
  6. Compute item properties
  7. Start timers, routes, boots


Computing:

  { eval: string } => returns vm2.eval(s)
  any other value  => that value

  eval context has access to JSX
    JSX.createElement
    JSX.fragment


Special item fields (all optional):

  $name
    => assigned under type's $name in site.root
    => note: top-down, so must be reachable

  $type, $figure, $shadow
    => for each $type by id (deepest first)
      => inherit this[keys] from type.$figure
      => inherit globals from type.$shadow

  $route, $get, $post, $delete, $put, $patch, $head, $options
    => if $route is non-blank string, route each verb-fn

  $tick & $ms
    => call $tick every $ms seconds

  $boot
    => run after each site build


Item API:

  this: always executing item

  item[key]   => item.computed[key]
  item.$id    => string
  item.$data  => raw object for item
  item.$items => items with this direct type
  item.$type  => item or null


Site API:

  site.items: { id: item }
  site.root: { '$$'+name: root item }
  site.create(data): new id
  site.update(id, data)
  site.delete(id)
  site.rebuild()


Globals:

  Note: these can all be shadowed
  Note: to hide, shadow as null or anything

  $site: current site
  [globals]: app.sandbox


Route API:

  Input parameter:

    query(): URLSearchParams from query
    text(): string from body
    json(): object from body
    form(): URLSearchParams from body
    headers(): express.js headers object
    session: object

  return Promise<string | {
    status?: number
    headers?: object
    (redirect: string |
     text: string |
     json: object)
  }>
