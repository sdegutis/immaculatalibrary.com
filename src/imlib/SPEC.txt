

Engine input data:

  Items: JsonObject[]
  Used for routes, views, user data, helpers, logging, etc.
  Basically, anything you want to persist.


Engine rules (i.e. app.start):

  1. Compute item functions
  2. Call boot item function
  3. Start timers and routes

  On site.rebuild() goto #1


Computing:

  For each given value in an item:
    { $eval: string } => maps to vm.runInContext(string, context)
    any other value   => keeps the same value (any valid JSON type)

  * Items share a new global context on each build
  * On each item function, 'this' is the item
  * All item functions can use JSX and TypeScript syntax

  There must be one item with an item function called $boot.
    This function will be called as soon as the site is built.
    Input = { items, updater, external }
    Output = { routes, timers?, notFoundPage?, onRouteError? }


Item API:

  item[key]   => computed[val]
  item.$id    => string
  item.$data  => raw object for item


Updater API:

  site.create(data): new id
  site.update(id, data)
  site.delete(id)
  site.rebuild()
    if no error thrown:
      pushes db changes
      starts up new site


Route API:

  Input parameter:
    query(): URLSearchParams from query
    text(): string from body
    json(): object from body
    form(): URLSearchParams from body
    headers(): express.js headers object
    session: object

  return Promise<{
    status?: number
    headers?: object
    data?: any
  }>
