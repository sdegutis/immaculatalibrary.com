

Engine input data:

  { [key: string]: object }[]

  Used for routes, views, data, helpers, etc.


Engine rules (i.e. app.start):

  1. Compute item functions
  2. Call boot item function
  3. Start timers and routes

  On site.rebuild() goto #1


Computing:

  For each given value in an item:
    { $eval: string } => returns vm.runInContext(string, sandbox)
    any other value   => that value (any valid JSON type)

  * Items share a new global context on each build
  * Each item function has 'this' be the item
  * All eval contexts have access to JSX

  There must be one item with $boot pointing to a function.
    This function will be called each time the site is built.
    Input = { items, updater, sandbox }
    Output = { routes, timers?, [etc] }


Item API:

  item[key]   => item.computed[key]
  item.$id    => string
  item.$data  => raw object for item


Updater API:

  site.create(data): new id
  site.update(id, data)
  site.delete(id)
  site.rebuild()
    pushes db changes
    routes new site
    if fails, throws


Route API:

  Input parameter:

    query(): URLSearchParams from query
    text(): string from body
    json(): object from body
    form(): URLSearchParams from body
    headers(): express.js headers object
    session: object

  return Promise<string | {
    status?: number
    headers?: object
    (redirect: string |
     text: string |
     json: object)
  }>
